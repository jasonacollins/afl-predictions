<%- include('partials/header') %>

<div class="container">
  <h1>Admin Dashboard</h1>

  <div class="export-actions">
    <a href="/admin/export/predictions" class="button secondary-button">
      Export All Predictions (CSV)
    </a>
    <a href="/admin/export/database" class="button secondary-button">
      Export Database
    </a>
    <button id="refreshApiButton" class="button primary-button">
      Refresh API Data
    </button>
    <button id="uploadDatabaseButton" class="button primary-button">
      Upload Database
    </button>
  </div>
  
  <!-- Add a modal for API refresh -->
  <div id="refreshApiModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close" onclick="closeRefreshModal()">&times;</span>
      <h3>Refresh API Data</h3>
      <p>Select a year to refresh data from the Squiggle API:</p>
      <form id="refreshApiForm">
        <div class="form-group">
          <label for="refreshYear">Year:</label>
          <select id="refreshYear" name="year">
            <% years.forEach(year => { %>
              <option value="<%= year.year %>" <%= year.year === selectedYear ? 'selected' : '' %>><%= year.year %></option>
            <% }); %>
          </select>
        </div>
        <div class="form-group checkbox">
          <input type="checkbox" id="forceScoreUpdate" name="forceScoreUpdate">
          <label for="forceScoreUpdate">Force score updates (override completed matches)</label>
        </div>
        <div id="refreshStatus"></div>
        <button type="submit" class="button primary-button">Start Refresh</button>
      </form>
    </div>
  </div>
  
  <!-- Add a modal for database upload -->
  <div id="uploadDatabaseModal" class="modal" style="display: none;">
    <div class="modal-content">
      <span class="close" onclick="closeUploadModal()">&times;</span>
      <h3>Upload Database</h3>
      <div class="warning-message">
        <strong>Warning:</strong> This will replace the entire database. Make sure you have a backup!
      </div>
      <form id="uploadDatabaseForm" enctype="multipart/form-data">
        <div class="form-group">
          <label for="databaseFile">Select SQLite Database File:</label>
          <input type="file" id="databaseFile" name="databaseFile" accept=".db,.sqlite" required>
        </div>
        <div id="uploadStatus"></div>
        <button type="submit" class="button primary-button">Upload & Replace Database</button>
      </form>
    </div>
  </div>
  
  <div class="tab-navigation">
    <a href="/predictions" class="tab">Make Predictions</a>
    <a href="/matches/stats" class="tab">View Statistics</a>
    <a href="/admin" class="tab active">Admin Panel</a>
  </div>
  
  <% if (locals.success) { %>
    <div class="alert success">
      <%= success %>
    </div>
  <% } %>
  
  <% if (locals.error) { %>
    <div class="alert error">
      <%= error %>
    </div>
  <% } %>
  
  <div class="admin-container">
    <div class="admin-section">
      <h2>Add New Predictor</h2>
      <form action="/admin/predictors" method="POST" class="admin-form">
        <div class="form-group">
          <label for="username">Username</label>
          <input type="text" id="username" name="username" required>
        </div>
        
        <div class="form-group">
          <label for="displayName">Display Name</label>
          <input type="text" id="displayName" name="displayName" required>
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" name="password" required>
        </div>
        
        <div class="form-group checkbox">
          <input type="checkbox" id="isAdmin" name="isAdmin">
          <label for="isAdmin">Admin privileges</label>
        </div>
        
        <div class="form-group">
          <label for="yearJoined">Year Joined</label>
          <input type="number" id="yearJoined" name="yearJoined" 
                 min="2020" max="<%= new Date().getFullYear() %>" 
                 value="<%= new Date().getFullYear() %>" required>
        </div>
        
        <button type="submit" class="button primary-button">Add Predictor</button>
      </form>
    </div>
    
    <div class="admin-section">
      <h2>Current Predictors</h2>
      <table class="admin-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Username</th>
            <th>Display Name</th>
            <th>Role</th>
            <th>Year Joined</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% predictors.forEach(predictor => { %>
            <tr>
              <td><%= predictor.predictor_id %></td>
              <td><%= predictor.name %></td>
              <td><%= predictor.display_name %></td>
              <td><%= predictor.is_admin ? 'Admin' : 'User' %></td>
              <td><%= predictor.year_joined || 'N/A' %></td>
              <td>
                <button 
                  onclick="showResetPasswordForm(<%= predictor.predictor_id %>, '<%= predictor.display_name %>')" 
                  class="button secondary-button"
                >
                  Reset Password
                </button>
                <button 
                  onclick="confirmDeleteUser(<%= predictor.predictor_id %>, '<%= predictor.display_name %>')" 
                  class="button secondary-button delete-button"
                >
                  Delete User
                </button>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>
    
    <div class="admin-section">
      <h2>Manage User Predictions</h2>
      
      <div class="user-selection">
        <h3>Select User</h3>
        <<div class="user-buttons">
          <% predictors.forEach(predictor => { %>
            <button 
              class="user-button" 
              data-user-id="<%= predictor.predictor_id %>"
              onclick="selectUser('<%= predictor.predictor_id %>', '<%= predictor.display_name %>')"
            >
              <%= predictor.display_name %>
            </button>
          <% }) %>
        </div>
      </div>
      
      <div id="user-predictions" class="user-predictions">
        <div class="selected-user-info">
          <p>Selected user: <span id="selected-user">None</span></p>
          <input type="hidden" id="selected-user-id" value="">
        </div>
        
        <div class="round-selector">
          <h3>Select Round</h3>
          <div class="round-buttons">
            <% rounds.forEach(round => { %>
              <button 
                data-round="<%= round.round_number %>" 
                class="round-button"
              >
                <% if (round.round_number === 'OR') { %>
                  Opening Round
                <% } else if (round.round_number === 'Elimination Final' || 
                              round.round_number === 'Qualifying Final' || 
                              round.round_number === 'Semi Final' || 
                              round.round_number === 'Preliminary Final' || 
                              round.round_number === 'Grand Final') { %>
                  <%= round.round_number %>
                <% } else { %>
                  Round <%= round.round_number %>
                <% } %>
              </button>
            <% }) %>
          </div>
        </div>
        
        <div id="matches-container" class="matches-container">
          <div class="no-selection">
            Please select a user and a round to manage predictions
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add a hidden modal for password reset -->
<div id="resetPasswordModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close" onclick="closeModal()">&times;</span>
    <h3>Reset Password for <span id="resetUserName"></span></h3>
    <form id="resetPasswordForm" action="/admin/reset-password/0" method="POST">
      <div class="form-group">
        <label for="newPassword">New Password</label>
        <input type="password" id="newPassword" name="newPassword" required>
      </div>
      <button type="submit" class="button primary-button">Reset Password</button>
    </form>
  </div>
</div>

<!-- Add JavaScript for the modal -->
<script>
  function showResetPasswordForm(userId, userName) {
    document.getElementById('resetUserName').textContent = userName;
    document.getElementById('resetPasswordForm').action = `/admin/reset-password/${userId}`;
    document.getElementById('newPassword').value = '';
    document.getElementById('resetPasswordModal').style.display = 'block';
  }
  
  function closeModal() {
    document.getElementById('resetPasswordModal').style.display = 'none';
  }
  
  function closeRefreshModal() {
    document.getElementById('refreshApiModal').style.display = 'none';
  }
  
  function closeUploadModal() {
    document.getElementById('uploadDatabaseModal').style.display = 'none';
  }
  
  // Close modal if user clicks outside of it
  window.onclick = function(event) {
    const resetModal = document.getElementById('resetPasswordModal');
    const refreshModal = document.getElementById('refreshApiModal');
    const uploadModal = document.getElementById('uploadDatabaseModal');
    
    if (event.target === resetModal) {
      closeModal();
    } else if (event.target === refreshModal) {
      closeRefreshModal();
    } else if (event.target === uploadModal) {
      closeUploadModal();
    }
  }
</script>

<script>
  // Initialize with empty predictions
  window.userPredictions = {};
  
  // Added a separate function to directly clear a prediction without validation
  function clearPredictionDirectly(matchId, userId, button) {
    if (!userId) {
      alert('Please select a user first');
      return;
    }
    
    // Show clearing state
    button.textContent = 'Clearing...';
    button.disabled = true;
    
    // Make the API call to clear the prediction
    fetch(`/admin/predictions/${userId}/save`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        matchId: matchId,
        probability: ""  // Empty string to indicate deletion
      }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Find and clear the inputs
        const input = document.querySelector(`.home-prediction[data-match-id="${matchId}"]`);
        const awayInput = document.querySelector(`.away-prediction[data-match-id="${matchId}"]`);
        
        if (input) input.value = '';
        if (awayInput) awayInput.value = '';
        
        button.textContent = 'Prediction Cleared';
        setTimeout(() => {
          button.textContent = 'Save Prediction';
          button.classList.remove('saved-state', 'update-state', 'delete-state');
          button.disabled = false;
        }, 1500);
        
        // Remove from stored predictions
        if (window.userPredictions && window.userPredictions[matchId] !== undefined) {
          delete window.userPredictions[matchId];
        }
        
        // Update data-original-value attribute on input
        if (input) {
          input.dataset.originalValue = '';
        }
      } else {
        button.textContent = data.error || 'Error!';
        setTimeout(() => {
          button.textContent = 'Save Prediction';
          button.disabled = false;
        }, 1500);
      }
    })
    .catch(error => {
      console.error('Error clearing prediction:', error);
      button.textContent = 'Failed!';
      setTimeout(() => {
        button.textContent = 'Save Prediction';
        button.disabled = false;
      }, 1500);
    });
  }
  
  // Add a function to clear predictions (just for UI changes)
  function clearPrediction(matchId) {
    const input = document.querySelector(`.home-prediction[data-match-id="${matchId}"]`);
    const awayInput = document.querySelector(`.away-prediction[data-match-id="${matchId}"]`);
    const saveButton = document.querySelector(`.save-prediction[data-match-id="${matchId}"]`);
    
    if (input) {
      // Clear the input fields
      input.value = '';
      if (awayInput) awayInput.value = '';
      
      // Update button text
      if (saveButton) {
        saveButton.textContent = 'Clear Prediction';
        saveButton.classList.remove('saved-state', 'update-state');
        saveButton.classList.add('delete-state');
      }
    }
  }
  
  // Override save prediction for admin
  document.addEventListener('DOMContentLoaded', function() {
    // Override the savePrediction function when used in admin context
    window.savePredictionOriginal = window.savePrediction;
    window.savePrediction = function(matchId, probability, button) {
      const userId = document.getElementById('selected-user-id').value;
      
      if (!userId) {
        alert('Please select a user first');
        return;
      }
      
      // Special handling for empty values - directly use our special clear function
      if (probability === "" || probability === null) {
        clearPredictionDirectly(matchId, userId, button);
        return;
      }
      
      // Show saving state
      const originalText = button.textContent;
      button.textContent = 'Saving...';
      button.disabled = true;
      
      fetch(`/admin/predictions/${userId}/save`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          matchId: matchId,
          probability: probability
        }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          button.textContent = 'Saved!';
          setTimeout(() => {
            button.textContent = 'Saved';
            button.classList.add('saved-state');
            button.classList.remove('update-state', 'delete-state');
            button.disabled = false;
          }, 1500);
          
          // Update stored prediction
          updateStoredPrediction(matchId, probability);
          
          // Update data-original-value attribute on input
          const input = document.querySelector(`.home-prediction[data-match-id="${matchId}"]`);
          if (input) {
            input.dataset.originalValue = probability;
          }
        } else {
          button.textContent = data.error || 'Error!';
          setTimeout(() => {
            button.textContent = originalText;
            button.disabled = false;
          }, 1500);
        }
      })
      .catch(error => {
        console.error('Error saving prediction:', error);
        button.textContent = 'Failed!';
        setTimeout(() => {
          button.textContent = originalText;
          button.disabled = false;
        }, 1500);
      });
    };
  });
</script>

<script>
  // Function to add Clear buttons to each prediction after rendering
  function addClearButtons() {
    document.querySelectorAll('.match-card').forEach(card => {
      // Check if there's already a clear button
      if (card.querySelector('.clear-prediction')) return;
      
      const matchId = card.querySelector('.home-prediction')?.dataset?.matchId;
      if (matchId) {
        const predictionControls = card.querySelector('.prediction-controls');
        if (predictionControls) {
          // Create a clear button
          const clearButton = document.createElement('button');
          clearButton.className = 'clear-prediction';
          clearButton.textContent = 'Clear';
          clearButton.dataset.matchId = matchId;
          
          // Add click handler with direct API call
          clearButton.addEventListener('click', function(e) {
            e.preventDefault(); // Prevent default form submission
            
            const matchId = this.dataset.matchId;
            const userId = document.getElementById('selected-user-id').value;
            
            if (!userId) {
              alert('Please select a user first');
              return;
            }
            
            const card = this.closest('.match-card');
            const input = card.querySelector('.home-prediction');
            const awayInput = card.querySelector('.away-prediction');
            const saveButton = card.querySelector('.save-prediction');
            
            // Show clearing state
            saveButton.textContent = 'Clearing...';
            saveButton.disabled = true;
            
            // Direct API call
            fetch(`/admin/predictions/${userId}/save`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                matchId: matchId,
                probability: null  // Use null instead of empty string
              }),
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                // Clear the inputs
                input.value = '';
                if (awayInput) awayInput.value = '';
                
                saveButton.textContent = 'Prediction Cleared';
                setTimeout(() => {
                  saveButton.textContent = 'Save Prediction';
                  saveButton.classList.remove('saved-state', 'update-state', 'delete-state');
                  saveButton.disabled = false;
                }, 1500);
                
                // Remove from stored predictions
                if (window.userPredictions && window.userPredictions[matchId] !== undefined) {
                  delete window.userPredictions[matchId];
                }
                
                // Update data-original-value attribute on input
                if (input) {
                  input.dataset.originalValue = '';
                }
              } else {
                saveButton.textContent = data.error || 'Error!';
                setTimeout(() => {
                  saveButton.textContent = 'Save Prediction';
                  saveButton.disabled = false;
                }, 1500);
              }
            })
            .catch(error => {
              console.error('Error clearing prediction:', error);
              saveButton.textContent = 'Failed!';
              setTimeout(() => {
                saveButton.textContent = 'Save Prediction';
                saveButton.disabled = false;
              }, 1500);
            });
          });
          
          // Append to the controls
          predictionControls.appendChild(clearButton);
        }
      }
    });
  }
  
  // Extend the fetchMatchesForRound function to add clear buttons after rendering
  const originalFetchMatchesForRound = window.fetchMatchesForRound;
  window.fetchMatchesForRound = function(round) {
    if (originalFetchMatchesForRound) {
      originalFetchMatchesForRound.call(this, round);
      
      // Add a slight delay to ensure DOM is updated
      setTimeout(addClearButtons, 500);
    }
  };
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', function() {
    // After a short delay to ensure all other scripts have run
    setTimeout(addClearButtons, 500);
  });
</script>

<script src="/js/main.js"></script>

<script>
  // Handle API refresh button
  document.addEventListener('DOMContentLoaded', function() {
    const refreshButton = document.getElementById('refreshApiButton');
    const refreshForm = document.getElementById('refreshApiForm');
    const uploadButton = document.getElementById('uploadDatabaseButton');
    const uploadForm = document.getElementById('uploadDatabaseForm');
    
    if (refreshButton) {
      refreshButton.addEventListener('click', function() {
        document.getElementById('refreshApiModal').style.display = 'block';
      });
    }
    
    if (uploadButton) {
      uploadButton.addEventListener('click', function() {
        document.getElementById('uploadDatabaseModal').style.display = 'block';
      });
    }
    
    if (refreshForm) {
      refreshForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const year = document.getElementById('refreshYear').value;
        const forceScoreUpdate = document.getElementById('forceScoreUpdate').checked;
        const statusDiv = document.getElementById('refreshStatus');
        const submitButton = this.querySelector('button[type="submit"]');
        
        // Update UI
        const forceUpdateMsg = forceScoreUpdate ? ' with force score update enabled' : '';
        statusDiv.innerHTML = `<p class="alert success">Refreshing data from API${forceUpdateMsg}, please wait...</p>`;
        submitButton.disabled = true;
        
        // Make API request
        fetch('/admin/api-refresh', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ 
            year,
            forceScoreUpdate 
          }),
        })
        .then(response => {
          console.log('Response status:', response.status);
          return response.json();
        })
        .then(data => {
          if (data.success) {
            let statusHTML = `<p class="alert success">${data.message}</p>`;
            
            // Add skipped games information if available
            if (data.skippedGames && data.skippedGames.length > 0) {
              statusHTML += '<div class="skipped-games">';
              statusHTML += '<h4>Skipped Games:</h4>';
              statusHTML += '<ul>';
              data.skippedGames.forEach(game => {
                statusHTML += `<li>${game}</li>`;
              });
              statusHTML += '</ul>';
              statusHTML += '</div>';
            }
            
            statusDiv.innerHTML = statusHTML;
          } else {
            statusDiv.innerHTML = `<p class="alert error">${data.message}</p>`;
          }
          
          // Re-enable the button after 3 seconds
          setTimeout(() => {
            submitButton.disabled = false;
          }, 3000);
        })
        .catch(error => {
          console.error('Fetch error:', error);
          statusDiv.innerHTML = `<p class="alert error">Error: ${error.message}</p>`;
          submitButton.disabled = false;
        });
      });
    }
    
    if (uploadForm) {
      uploadForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const fileInput = document.getElementById('databaseFile');
        const statusDiv = document.getElementById('uploadStatus');
        const submitButton = this.querySelector('button[type="submit"]');
        
        if (!fileInput.files.length) {
          statusDiv.innerHTML = '<p class="alert error">Please select a database file.</p>';
          return;
        }
        
        const formData = new FormData();
        formData.append('databaseFile', fileInput.files[0]);
        
        // Update UI
        statusDiv.innerHTML = '<p class="alert success">Uploading database, please wait...</p>';
        submitButton.disabled = true;
        
        // Upload file
        fetch('/admin/upload-database', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            statusDiv.innerHTML = '<p class="alert success">' + data.message + '</p>';
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            statusDiv.innerHTML = '<p class="alert error">' + data.message + '</p>';
            submitButton.disabled = false;
          }
        })
        .catch(error => {
          console.error('Upload error:', error);
          statusDiv.innerHTML = '<p class="alert error">Error: ' + error.message + '</p>';
          submitButton.disabled = false;
        });
      });
    }
  });
  
  function closeRefreshModal() {
    document.getElementById('refreshApiModal').style.display = 'none';
  }
</script>

<!-- Add a hidden modal for delete confirmation -->
<div id="deleteUserModal" class="modal" style="display: none;">
  <div class="modal-content">
    <span class="close" onclick="closeDeleteModal()">&times;</span>
    <h3>Delete User: <span id="deleteUserName"></span></h3>
    <p>Are you sure you want to delete this user? This action cannot be undone.</p>
    <p>All predictions made by this user will also be deleted.</p>
    <form id="deleteUserForm" action="/admin/delete-user/0" method="POST">
      <div class="form-actions">
        <button type="button" class="button secondary-button" onclick="closeDeleteModal()">Cancel</button>
        <button type="submit" class="button primary-button delete-button">Delete User</button>
      </div>
    </form>
  </div>
</div>

<!-- Add JavaScript for delete confirmation -->
<script>
  function confirmDeleteUser(userId, userName) {
    document.getElementById('deleteUserName').textContent = userName;
    document.getElementById('deleteUserForm').action = `/admin/delete-user/${userId}`;
    document.getElementById('deleteUserModal').style.display = 'block';
  }
  
  function closeDeleteModal() {
    document.getElementById('deleteUserModal').style.display = 'none';
  }
  
  // Close modal if user clicks outside of it
  window.onclick = function(event) {
    const deleteModal = document.getElementById('deleteUserModal');
    const resetModal = document.getElementById('resetPasswordModal');
    
    if (event.target === deleteModal) {
      closeDeleteModal();
    } else if (event.target === resetModal) {
      closeModal();
    }
  }
</script>

<script>
  window.isAdmin = true;
</script>

<%- include('partials/footer') %>